/** Derived from function detectAndDisplay() from the Object detection tutorial: Cascade Classifier
http://docs.opencv.org/doc/tutorials/objdetect/cascade_classifier/cascade_classifier.html#cascade-classifier
More about Cascade Classification:
http://docs.opencv.org/modules/objdetect/doc/cascade_classification.html?highlight=detectmultiscale#haar-feature-based-cascade-classifier-for-object-detection
*/
// Global vaiables
CascadeClassifier face_cascade; // cascade classifier object for face
CascadeClassifier eyes_cascade; // cascade classifier object for eyes
CascadeClassifier mouth_cascade; // cascade classifier object for face
CascadeClassifier nose_cascade; // cascade classifier object for eyes

/* ---------------------------------------------------------------------------------------
Detects all the faces and eyes in the input image + the eyes
window_name - name of the destination window in which the detection results are displayed
frame - source image
minFaceSize - minimum size of the ROI in which a Face is searched
minEyeSize - minimum size of the ROI in which an Eye is searched
acording to the antropomorphic features of a face, minEyeSize = minFaceSize / 5
Usage: FaceDetectandDisplay( WIN_DST, dst, minFaceSize, minEyeSize );
---------------------------------------------------------------------------------------- */
void FaceDetectandDisplay(const string& window_name, Mat frame, int minFaceSize, int minEyeSize)
{
	std::vector<Rect> faces;
	Mat frame_gray;

	cvtColor(frame, frame_gray, COLOR_BGR2GRAY);
	equalizeHist(frame_gray, frame_gray);

	//-- Detect faces
	face_cascade.detectMultiScale(frame_gray, faces, 1.1, 2, 0,	Size(minFaceSize, minFaceSize));
	for (int i = 0; i < faces.size(); i++)
	{
		Point center(faces[i].x + faces[i].width*0.5, faces[i].y + faces[i].height*0.5);
		ellipse(frame, center, Size(faces[i].width*0.5, faces[i].height*0.5), 0, 0,
			360, Scalar(255, 0, 255), 4, 8, 0);
		Mat faceROI = frame_gray(faces[i]);
		std::vector<Rect> eyes;
		//-- In each face (rectangular ROI), detect the eyes
		eyes_cascade.detectMultiScale(faceROI, eyes, 1.1, 2, 0, Size(minEyeSize, minEyeSize));
		for (int j = 0; j < eyes.size(); j++)
		{
			Point center(faces[i].x + eyes[j].x + eyes[j].width*0.5,
				faces[i].y + eyes[j].y + eyes[j].height*0.5);
			int radius = cvRound((eyes[j].width + eyes[j].height)*0.25);
			circle(frame, center, radius, Scalar(255, 0, 0), 4, 8, 0);
		}
	}
	imshow(window_name, frame); //-- Show what you got
}
